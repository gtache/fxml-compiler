package com.github.gtache.fxml.compiler.parsing.xml;

/**
 * Generated code, not thread-safe
 */
public final class ControlsView {

    private final java.util.Map<Class<?>, Object> controllersMap;
    private final java.util.Map<Class<?>, java.util.ResourceBundle> resourceBundlesMap;
    private boolean loaded;
    private com.github.gtache.fxml.compiler.parsing.xml.ControlsController controller;

    /**
     * Instantiates a new ControlsView with no nested controllers and no resource bundle
     * @param controller The controller
     */
    public ControlsView(final com.github.gtache.fxml.compiler.parsing.xml.ControlsController controller) {
        this(java.util.Map.of(com.github.gtache.fxml.compiler.parsing.xml.ControlsController.class, controller), java.util.Map.of());
    }

    /**
     * Instantiates a new ControlsView with no nested controllers
     * @param controller The controller
     * @param resourceBundle The resource bundle
     */
    public ControlsView(final com.github.gtache.fxml.compiler.parsing.xml.ControlsController controller, final java.util.ResourceBundle resourceBundle) {
        this(java.util.Map.of(com.github.gtache.fxml.compiler.parsing.xml.ControlsController.class, controller), java.util.Map.of(com.github.gtache.fxml.compiler.parsing.xml.ControlsController.class, resourceBundle));
    }

    /**
     * Instantiates a new ControlsView with nested controllers
     * @param controllersMap The map of controller class to controller
     * @param resourceBundlesMap The map of controller class to resource bundle
     */
    public ControlsView(final java.util.Map<Class<?>, Object> controllersMap, final java.util.Map<Class<?>, java.util.ResourceBundle> resourceBundlesMap) {
        this.controllersMap = java.util.Map.copyOf(controllersMap);
        this.resourceBundlesMap = java.util.Map.copyOf(resourceBundlesMap);
    }

    /**
     * Loads the view. Can only be called once.
     *
     * @return The view parent
     */
    public <T> T load() {
    if (loaded) {
        throw new IllegalStateException("Already loaded");
    }
    final var bundle = java.util.ResourceBundle.getBundle("com.github.gtache.fxml.compiler.parsing.xml.ControlsBundle");
    controller = (com.github.gtache.fxml.compiler.parsing.xml.ControlsController) controllersMap.get(com.github.gtache.fxml.compiler.parsing.xml.ControlsController.class);
    final var gridpane0 = new javafx.scene.layout.GridPane();
    gridpane0.setOnInputMethodTextChanged(controller::inputMethodTextChanged);
    gridpane0.setOnKeyPressed(e -> controller.keyPressed());
    gridpane0.setOnKeyReleased(controller::keyReleased);
    gridpane0.setOnKeyTyped(controller::keyTyped);
    final var string0 = "text";
    final var button0 = new javafx.scene.control.Button();
    injectField("button", button0);
    button0.setMnemonicParsing(false);
    final var string1 = "Button";
    button0.setText(string1);
    final var checkbox0 = new javafx.scene.control.CheckBox();
    javafx.scene.layout.GridPane.setColumnIndex(checkbox0, 1);
    injectField("checkBox", checkbox0);
    checkbox0.setIndeterminate(true);
    checkbox0.setMnemonicParsing(false);
    final var string2 = "CheckBox";
    checkbox0.setText(string2);
    final var choicebox0 = new javafx.scene.control.ChoiceBox();
    choicebox0.setAccessibleText(string0);
    choicebox0.setCacheShape(false);
    choicebox0.setCenterShape(false);
    choicebox0.setDisable(true);
    choicebox0.setFocusTraversable(false);
    choicebox0.setPrefWidth(150.0);
    javafx.scene.layout.GridPane.setRowIndex(choicebox0, 1);
    choicebox0.setScaleShape(false);
    choicebox0.setVisible(false);
    final var colorpicker0 = new javafx.scene.control.ColorPicker();
    javafx.scene.layout.GridPane.setColumnIndex(colorpicker0, 1);
    injectField("colorPicker", colorpicker0);
    colorpicker0.setNodeOrientation(javafx.geometry.NodeOrientation.LEFT_TO_RIGHT);
    colorpicker0.setOpacity(0.5);
    javafx.scene.layout.GridPane.setRowIndex(colorpicker0, 1);
    final var insets0 = new javafx.geometry.Insets(5.0, 4.0, 3.0, 2.0);
    colorpicker0.setOpaqueInsets(insets0);
    final var color0 = new javafx.scene.paint.Color(0.7894737124443054, 0.08771929889917374, 0.08771929889917374, 1);
    injectField("color", color0);
    colorpicker0.setValue(color0);
    final var combobox0 = new javafx.scene.control.ComboBox();
    combobox0.setEditable(true);
    injectField("comboBox", combobox0);
    combobox0.setPrefWidth(150.0);
    combobox0.setPromptText("Text");
    javafx.scene.layout.GridPane.setRowIndex(combobox0, 2);
    combobox0.setVisibleRowCount(5);
    final var cursor0 = javafx.scene.Cursor.CLOSED_HAND;
    combobox0.setCursor(cursor0);
    final var bloom0 = new javafx.scene.effect.Bloom();
    combobox0.setEffect(bloom0);
    final var datepicker0 = new javafx.scene.control.DatePicker();
    javafx.scene.layout.GridPane.setColumnIndex(datepicker0, 1);
    javafx.scene.layout.GridPane.setRowIndex(datepicker0, 2);
    datepicker0.setShowWeekNumbers(true);
    datepicker0.setStyle("-fx-background-color: #ffffff;");
    final var htmleditor0 = new javafx.scene.web.HTMLEditor();
    htmleditor0.setHtmlText("<html><head></head><body contenteditable=\"true\"></body></html>");
    htmleditor0.setPrefHeight(200.0);
    htmleditor0.setPrefWidth(506.0);
    javafx.scene.layout.GridPane.setRowIndex(htmleditor0, 3);
    htmleditor0.getStyleClass().addAll(java.util.List.of("clazz"));
    htmleditor0.getStylesheets().addAll(java.util.List.of(getClass().getResource("style.css").toString()));
    final var hyperlink0 = new javafx.scene.control.Hyperlink();
    javafx.scene.layout.GridPane.setColumnIndex(hyperlink0, 1);
    javafx.scene.layout.GridPane.setRowIndex(hyperlink0, 3);
    hyperlink0.setText("Hyperlink");
    final var imageview0 = new javafx.scene.image.ImageView();
    imageview0.setFitHeight(150.0);
    imageview0.setFitWidth(200.0);
    imageview0.setPickOnBounds(true);
    imageview0.setPreserveRatio(true);
    javafx.scene.layout.GridPane.setRowIndex(imageview0, 4);
final java.net.URL url0;
try {
    url0 = new java.net.URI("https://github.com/gtache").toURL();
} catch (final java.net.MalformedURLException | java.net.URISyntaxException e) {
    throw new RuntimeException("Couldn't parse url : https://github.com/gtache", e);
}
    final var urlStr0 = url0.toString();
    final var image0 = new javafx.scene.image.Image(urlStr0, 200.0, 100.0, true, true, true);
    imageview0.setImage(image0);
    final var imageview1 = new javafx.scene.image.ImageView();
    final var url1 = getClass().getResource("image.png");
    final var urlStr1 = url1.toString();
    final var image1 = new javafx.scene.image.Image(urlStr1, 0.0, 0.0, false, false, false);
    imageview1.setImage(image1);
final java.net.URL url2;
try {
    url2 = new java.net.URI("/url").toURL();
} catch (final java.net.MalformedURLException | java.net.URISyntaxException e) {
    throw new RuntimeException("Couldn't parse url : /url", e);
}
    final var urlStr2 = url2.toString();
    final var image2 = new javafx.scene.image.Image(urlStr2, 0.0, 0.0, false, false, false);
    final var imageview2 = new javafx.scene.image.ImageView();
    final var parsedreference0 = image2;
    imageview2.setImage(parsedreference0);
    final var label0 = new javafx.scene.control.Label();
    label0.setAccessibleHelp("TTTTT");
    label0.setBlendMode(javafx.scene.effect.BlendMode.ADD);
    label0.setCache(true);
    label0.setCacheHint(javafx.scene.CacheHint.QUALITY);
    javafx.scene.layout.GridPane.setColumnIndex(label0, 1);
    label0.setDepthTest(javafx.scene.DepthTest.ENABLE);
    label0.setMnemonicParsing(true);
    label0.setMouseTransparent(true);
    javafx.scene.layout.GridPane.setRowIndex(label0, 4);
    label0.setText(bundle.getString("include.label"));
    final var parsedcopy0 = new java.lang.String(string0);
    label0.setAccessibleText(parsedcopy0);
    final var listview0 = new javafx.scene.control.ListView<javafx.scene.control.Label>();
    listview0.setFixedCellSize(20.0);
    injectField("listView", listview0);
    listview0.setNodeOrientation(javafx.geometry.NodeOrientation.RIGHT_TO_LEFT);
    listview0.setOrientation(javafx.geometry.Orientation.HORIZONTAL);
    listview0.setPrefHeight(200.0);
    listview0.setPrefWidth(200.0);
    javafx.scene.layout.GridPane.setRowIndex(listview0, 5);
    final var mediaview0 = new javafx.scene.media.MediaView();
    javafx.scene.layout.GridPane.setColumnIndex(mediaview0, 1);
    javafx.scene.layout.GridPane.setColumnSpan(mediaview0, 2);
    mediaview0.setFitHeight(200.0);
    mediaview0.setFitWidth(200.0);
    javafx.scene.layout.GridPane.setRowIndex(mediaview0, 5);
    javafx.scene.layout.GridPane.setRowSpan(mediaview0, 2);
    final var menubar0 = new javafx.scene.control.MenuBar();
    javafx.scene.layout.GridPane.setHalignment(menubar0, javafx.geometry.HPos.RIGHT);
    javafx.scene.layout.GridPane.setHgrow(menubar0, javafx.scene.layout.Priority.ALWAYS);
    javafx.scene.layout.GridPane.setRowIndex(menubar0, 7);
    javafx.scene.layout.GridPane.setValignment(menubar0, javafx.geometry.VPos.BASELINE);
    javafx.scene.layout.GridPane.setVgrow(menubar0, javafx.scene.layout.Priority.SOMETIMES);
    final var menu0 = new javafx.scene.control.Menu();
    menu0.setMnemonicParsing(false);
    menu0.setText("File");
    final var menuitem0 = new javafx.scene.control.MenuItem();
    menuitem0.setMnemonicParsing(false);
    menuitem0.setText("Close");
    final var menuitem1 = new javafx.scene.control.MenuItem();
    menuitem1.setMnemonicParsing(false);
    menuitem1.setText("Open");
    menu0.getItems().addAll(java.util.List.of(menuitem0, menuitem1));
    final var menu1 = new javafx.scene.control.Menu();
    menu1.setMnemonicParsing(false);
    menu1.setText("Edit");
    final var menuitem2 = new javafx.scene.control.MenuItem();
    menuitem2.setMnemonicParsing(false);
    menuitem2.setText("Delete");
    menu1.getItems().addAll(java.util.List.of(menuitem2));
    final var menu2 = new javafx.scene.control.Menu();
    menu2.setMnemonicParsing(false);
    menu2.setText("Help");
    final var menuitem3 = new javafx.scene.control.MenuItem();
    menuitem3.setMnemonicParsing(false);
    menuitem3.setText("About");
    menu2.getItems().addAll(java.util.List.of(menuitem3));
    menubar0.getMenus().addAll(java.util.List.of(menu0, menu1, menu2));
    final var menubutton0 = new javafx.scene.control.MenuButton();
    javafx.scene.layout.GridPane.setColumnIndex(menubutton0, 1);
    menubutton0.setMnemonicParsing(false);
    javafx.scene.layout.GridPane.setRowIndex(menubutton0, 7);
    menubutton0.setText("MenuButton");
    final var menuitem4 = new javafx.scene.control.MenuItem();
    menuitem4.setMnemonicParsing(false);
    menuitem4.setText("Action 1");
    final var menuitem5 = new javafx.scene.control.MenuItem();
    menuitem5.setMnemonicParsing(false);
    menuitem5.setText("Action 2");
    menubutton0.getItems().addAll(java.util.List.of(menuitem4, menuitem5));
    final var insets1 = new javafx.geometry.Insets(5.0, 4.0, 3.0, 2.0);
    javafx.scene.layout.GridPane.setMargin(menubutton0, insets1);
    final var pagination0 = new javafx.scene.control.Pagination();
    pagination0.setPrefHeight(200.0);
    pagination0.setPrefWidth(200.0);
    javafx.scene.layout.GridPane.setRowIndex(pagination0, 8);
    final var insets2 = new javafx.geometry.Insets(5.0, 4.0, 3.0, 2.0);
    pagination0.setPadding(insets2);
    final var passwordfield0 = new javafx.scene.control.PasswordField();
    javafx.scene.layout.GridPane.setColumnIndex(passwordfield0, 1);
    passwordfield0.setMaxHeight(Double.valueOf("Infinity"));
    passwordfield0.setMaxWidth(5.0);
    passwordfield0.setMinHeight(Double.valueOf("-Infinity"));
    passwordfield0.setMinWidth(1.0);
    passwordfield0.setPrefColumnCount(7);
    passwordfield0.setPrefHeight(4.0);
    passwordfield0.setPrefWidth(3.0);
    javafx.scene.layout.GridPane.setRowIndex(passwordfield0, 8);
    final var progressbar0 = new javafx.scene.control.ProgressBar();
    progressbar0.setLayoutX(10.0);
    progressbar0.setLayoutY(20.0);
    progressbar0.setPrefWidth(200.0);
    progressbar0.setProgress(0.0);
    javafx.scene.layout.GridPane.setRowIndex(progressbar0, 9);
    final var progressindicator0 = new javafx.scene.control.ProgressIndicator();
    javafx.scene.layout.GridPane.setColumnIndex(progressindicator0, 1);
    progressindicator0.setProgress(0.0);
    progressindicator0.setRotate(2.0);
    javafx.scene.layout.GridPane.setRowIndex(progressindicator0, 9);
    final var point3d0 = new javafx.geometry.Point3D(4.0, 5.0, 6.0);
    progressindicator0.setRotationAxis(point3d0);
    final var radiobutton0 = new javafx.scene.control.RadioButton();
    radiobutton0.setMnemonicParsing(false);
    javafx.scene.layout.GridPane.setRowIndex(radiobutton0, 10);
    radiobutton0.setScaleX(7.0);
    radiobutton0.setScaleY(2.0);
    radiobutton0.setScaleZ(3.0);
    radiobutton0.setText("RadioButton");
    radiobutton0.setTranslateX(4.0);
    radiobutton0.setTranslateY(5.0);
    radiobutton0.setTranslateZ(6.0);
    final var scrollbar0 = new javafx.scene.control.ScrollBar();
    javafx.scene.layout.GridPane.setColumnIndex(scrollbar0, 1);
    javafx.scene.layout.GridPane.setRowIndex(scrollbar0, 10);
    final var scrollbar1 = new javafx.scene.control.ScrollBar();
    scrollbar1.setOrientation(javafx.geometry.Orientation.VERTICAL);
    javafx.scene.layout.GridPane.setRowIndex(scrollbar1, 11);
    final var separator0 = new javafx.scene.control.Separator();
    javafx.scene.layout.GridPane.setColumnIndex(separator0, 1);
    separator0.setOnDragDetected(controller::dragDetected);
    separator0.setOnDragDone(controller::dragDone);
    separator0.setOnDragDropped(controller::dragDropped);
    separator0.setOnDragEntered(controller::dragEntered);
    separator0.setOnDragExited(controller::dragExited);
    separator0.setOnDragOver(controller::dragOver);
    separator0.setOnMouseDragEntered(controller::mouseDragEntered);
    separator0.setOnMouseDragExited(controller::mouseDragExited);
    separator0.setOnMouseDragOver(controller::mouseDragOver);
    separator0.setOnMouseDragReleased(controller::mouseDragReleased);
    separator0.setPrefWidth(200.0);
    javafx.scene.layout.GridPane.setRowIndex(separator0, 11);
    final var separator1 = new javafx.scene.control.Separator();
    separator1.setOrientation(javafx.geometry.Orientation.VERTICAL);
    separator1.setPrefHeight(200.0);
    javafx.scene.layout.GridPane.setRowIndex(separator1, 12);
    final var slider0 = new javafx.scene.control.Slider();
    javafx.scene.layout.GridPane.setColumnIndex(slider0, 1);
    slider0.setOnContextMenuRequested(controller::contextMenuRequested);
    slider0.setOnMouseClicked(e -> controller.mouseClicked());
    slider0.setOnMouseDragged(controller::mouseDragged);
    slider0.setOnMouseEntered(controller::mouseEntered);
    slider0.setOnMouseExited(controller::mouseExited);
    slider0.setOnMouseMoved(controller::mouseMoved);
    slider0.setOnMousePressed(controller::mousePressed);
    slider0.setOnMouseReleased(controller::mouseReleased);
    slider0.setOnScroll(controller::onScroll);
    slider0.setOnScrollFinished(controller::onScrollFinished);
    slider0.setOnScrollStarted(controller::onScrollStarted);
    javafx.scene.layout.GridPane.setRowIndex(slider0, 12);
    final var slider1 = new javafx.scene.control.Slider();
    slider1.setOnZoom(controller::onZoom);
    slider1.setOnZoomFinished(controller::onZoomFinished);
    slider1.setOnZoomStarted(controller::onZoomStarted);
    slider1.setOrientation(javafx.geometry.Orientation.VERTICAL);
    javafx.scene.layout.GridPane.setRowIndex(slider1, 13);
    final var spinner0 = new javafx.scene.control.Spinner<Double>();
    javafx.scene.layout.GridPane.setColumnIndex(spinner0, 1);
    injectField("spinner", spinner0);
    javafx.scene.layout.GridPane.setRowIndex(spinner0, 13);
    final var splitmenubutton0 = new javafx.scene.control.SplitMenuButton();
    splitmenubutton0.setMnemonicParsing(false);
    javafx.scene.layout.GridPane.setRowIndex(splitmenubutton0, 14);
    splitmenubutton0.setText("SplitMenuButton");
    final var menuitem6 = new javafx.scene.control.MenuItem();
    menuitem6.setMnemonicParsing(false);
    menuitem6.setText("Action 1");
    final var menuitem7 = new javafx.scene.control.MenuItem();
    menuitem7.setMnemonicParsing(false);
    menuitem7.setText("Action 2");
    splitmenubutton0.getItems().addAll(java.util.List.of(menuitem6, menuitem7));
    final var tableview0 = new javafx.scene.control.TableView<javafx.scene.control.TextArea>();
    javafx.scene.layout.GridPane.setColumnIndex(tableview0, 1);
    injectField("tableView", tableview0);
    tableview0.setPrefHeight(200.0);
    tableview0.setPrefWidth(200.0);
    javafx.scene.layout.GridPane.setRowIndex(tableview0, 14);
    final var tablecolumn0 = new javafx.scene.control.TableColumn<javafx.scene.control.TextArea, Float>();
    injectField("tableColumn1", tablecolumn0);
    tablecolumn0.setPrefWidth(75.0);
    tablecolumn0.setText("C1");
    final var tablecolumn1 = new javafx.scene.control.TableColumn<javafx.scene.control.TextArea, String>();
    injectField("tableColumn2", tablecolumn1);
    tablecolumn1.setPrefWidth(75.0);
    tablecolumn1.setText("C2");
    tableview0.getColumns().addAll(java.util.List.of(tablecolumn0, tablecolumn1));
    final var textarea0 = new javafx.scene.control.TextArea();
    textarea0.setPrefHeight(200.0);
    textarea0.setPrefWidth(200.0);
    javafx.scene.layout.GridPane.setRowIndex(textarea0, 15);
    final var font0 = new javafx.scene.text.Font("Arial", 12.0);
    textarea0.setFont(font0);
    final var textfield0 = new javafx.scene.control.TextField();
    javafx.scene.layout.GridPane.setColumnIndex(textfield0, 1);
    javafx.scene.layout.GridPane.setRowIndex(textfield0, 15);
    final var togglebutton0 = new javafx.scene.control.ToggleButton();
    togglebutton0.setMnemonicParsing(false);
    togglebutton0.setOnAction(controller::onAction);
    togglebutton0.setOnRotate(controller::onRotate);
    togglebutton0.setOnRotationFinished(controller::onRotationFinished);
    togglebutton0.setOnRotationStarted(controller::onRotationStarted);
    javafx.scene.layout.GridPane.setRowIndex(togglebutton0, 16);
    togglebutton0.setText("ToggleButton");
    final var treetableview0 = new javafx.scene.control.TreeTableView<javafx.scene.control.TreeItem<String>>();
    javafx.scene.layout.GridPane.setColumnIndex(treetableview0, 1);
    injectField("treeTableView", treetableview0);
    treetableview0.setPrefHeight(200.0);
    treetableview0.setPrefWidth(200.0);
    javafx.scene.layout.GridPane.setRowIndex(treetableview0, 16);
    final var treetablecolumn0 = new javafx.scene.control.TreeTableColumn<javafx.scene.control.TreeItem<String>, String>();
    injectField("treeTableColumn1", treetablecolumn0);
    treetablecolumn0.setOnEditCancel(controller::onEditCancel);
    treetablecolumn0.setOnEditCommit(controller::onEditCommit);
    treetablecolumn0.setOnEditStart(controller::onEditStart);
    treetablecolumn0.setPrefWidth(75.0);
    treetablecolumn0.setText("C1");
    final var treetablecolumn1 = new javafx.scene.control.TreeTableColumn<javafx.scene.control.TreeItem<String>, Integer>();
    injectField("treeTableColumn2", treetablecolumn1);
    treetablecolumn1.setPrefWidth(75.0);
    treetablecolumn1.setSortType(javafx.scene.control.TreeTableColumn.SortType.DESCENDING);
    treetablecolumn1.setText("C2");
    treetableview0.getColumns().addAll(java.util.List.of(treetablecolumn0, treetablecolumn1));
    final var treeview0 = new javafx.scene.control.TreeView<String>();
    injectField("treeView", treeview0);
    treeview0.setOnSwipeDown(controller::onSwipeDown);
    treeview0.setOnSwipeLeft(controller::onSwipeLeft);
    treeview0.setOnSwipeRight(controller::onSwipeRight);
    treeview0.setOnSwipeUp(controller::onSwipeUp);
    treeview0.setPrefHeight(200.0);
    treeview0.setPrefWidth(200.0);
    javafx.scene.layout.GridPane.setRowIndex(treeview0, 17);
    final var webview0 = new javafx.scene.web.WebView();
    final var engine0 = webview0.getEngine();
    javafx.scene.layout.GridPane.setColumnIndex(webview0, 1);
try {
    final var field = controller.getClass().getDeclaredField("confirmHandler");
    field.setAccessible(true);
    final var value = (javafx.util.Callback) field.get(controller);
    engine0.setConfirmHandler(value);
} catch (NoSuchFieldException | IllegalAccessException e) {
    throw new RuntimeException(e);
}
    engine0.setCreatePopupHandler(controller::createPopupHandler);
    engine0.load("https://github.com/gtache");
try {
    final var field = controller.getClass().getDeclaredField("onAlert");
    field.setAccessible(true);
    final var value = (javafx.event.EventHandler) field.get(controller);
    engine0.setOnAlert(value);
} catch (NoSuchFieldException | IllegalAccessException e) {
    throw new RuntimeException(e);
}
    engine0.setOnResized(controller::onResized);
    webview0.setOnTouchMoved(controller::onTouchMoved);
    webview0.setOnTouchPressed(controller::onTouchPressed);
    webview0.setOnTouchReleased(controller::onTouchReleased);
    webview0.setOnTouchStationary(controller::onTouchStationary);
    webview0.setPrefHeight(200.0);
    webview0.setPrefWidth(200.0);
    javafx.scene.layout.GridPane.setRowIndex(webview0, 17);
    gridpane0.getChildren().addAll(java.util.List.of(button0, checkbox0, choicebox0, colorpicker0, combobox0, datepicker0, htmleditor0, hyperlink0, imageview0, imageview1, imageview2, label0, listview0, mediaview0, menubar0, menubutton0, pagination0, passwordfield0, progressbar0, progressindicator0, radiobutton0, scrollbar0, scrollbar1, separator0, separator1, slider0, slider1, spinner0, splitmenubutton0, tableview0, textarea0, textfield0, togglebutton0, treetableview0, treeview0, webview0));
    final var columnconstraints0 = new javafx.scene.layout.ColumnConstraints();
    final var columnconstraints1 = new javafx.scene.layout.ColumnConstraints();
    final var columnconstraints2 = new javafx.scene.layout.ColumnConstraints();
    columnconstraints2.setMinWidth(10.0);
    columnconstraints2.setPrefWidth(100.0);
    gridpane0.getColumnConstraints().addAll(java.util.List.of(columnconstraints0, columnconstraints1, columnconstraints2));
    final var rowconstraints0 = new javafx.scene.layout.RowConstraints();
    final var rowconstraints1 = new javafx.scene.layout.RowConstraints();
    final var rowconstraints2 = new javafx.scene.layout.RowConstraints();
    final var rowconstraints3 = new javafx.scene.layout.RowConstraints();
    final var rowconstraints4 = new javafx.scene.layout.RowConstraints();
    final var rowconstraints5 = new javafx.scene.layout.RowConstraints();
    final var rowconstraints6 = new javafx.scene.layout.RowConstraints();
    final var rowconstraints7 = new javafx.scene.layout.RowConstraints();
    final var rowconstraints8 = new javafx.scene.layout.RowConstraints();
    final var rowconstraints9 = new javafx.scene.layout.RowConstraints();
    final var rowconstraints10 = new javafx.scene.layout.RowConstraints();
    final var rowconstraints11 = new javafx.scene.layout.RowConstraints();
    final var rowconstraints12 = new javafx.scene.layout.RowConstraints();
    final var rowconstraints13 = new javafx.scene.layout.RowConstraints();
    final var rowconstraints14 = new javafx.scene.layout.RowConstraints();
    final var rowconstraints15 = new javafx.scene.layout.RowConstraints();
    final var rowconstraints16 = new javafx.scene.layout.RowConstraints();
    final var rowconstraints17 = new javafx.scene.layout.RowConstraints();
    gridpane0.getRowConstraints().addAll(java.util.List.of(rowconstraints0, rowconstraints1, rowconstraints2, rowconstraints3, rowconstraints4, rowconstraints5, rowconstraints6, rowconstraints7, rowconstraints8, rowconstraints9, rowconstraints10, rowconstraints11, rowconstraints12, rowconstraints13, rowconstraints14, rowconstraints15, rowconstraints16, rowconstraints17));
    controller.initialize();
    loaded = true;
    return (T) gridpane0;
}

    private <T> void injectField(final String fieldName, final T object) {
    try {
        final var field = controller.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(controller, object);
    } catch (final NoSuchFieldException | IllegalAccessException e) {
        throw new RuntimeException("Error using reflection on " + fieldName, e);
    }
}


    /**
     * @return The controller
     */
    public com.github.gtache.fxml.compiler.parsing.xml.ControlsController controller() {
        if (loaded) {
            return controller;
        } else {
            throw new IllegalStateException("Not loaded");
        }
    }
}
