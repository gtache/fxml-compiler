package com.github.gtache.fxml.compiler.parsing.xml;

/**
 * Generated code, not thread-safe
 */
public final class IncludesView {

    private final java.util.Map<Class<?>, com.github.gtache.fxml.compiler.ControllerFactory<?>> controllersMap;
    private final java.util.Map<Class<?>, java.util.ResourceBundle> resourceBundlesMap;
    private boolean loaded;
    private com.github.gtache.fxml.compiler.parsing.xml.IncludesController controller;

    /**
     * Instantiates a new IncludesView with no nested controllers and no resource bundle
     * @param controllerFactory The controller factory
     */
    public IncludesView(final com.github.gtache.fxml.compiler.ControllerFactory<com.github.gtache.fxml.compiler.parsing.xml.IncludesController> controllerFactory) {
        this(java.util.Map.of(com.github.gtache.fxml.compiler.parsing.xml.IncludesController.class, controllerFactory), java.util.Map.of());
    }

    /**
     * Instantiates a new IncludesView with no nested controllers
     * @param controllerFactory The controller factory
     * @param resourceBundle The resource bundle
     */
    public IncludesView(final com.github.gtache.fxml.compiler.ControllerFactory<com.github.gtache.fxml.compiler.parsing.xml.IncludesController> controllerFactory, final java.util.ResourceBundle resourceBundle) {
        this(java.util.Map.of(com.github.gtache.fxml.compiler.parsing.xml.IncludesController.class, controllerFactory), java.util.Map.of(com.github.gtache.fxml.compiler.parsing.xml.IncludesController.class, resourceBundle));
    }

    /**
     * Instantiates a new IncludesView with nested controllers
     * @param controllersMap The map of controller class to controller factory
     * @param resourceBundlesMap The map of controller class to resource bundle
     */
    public IncludesView(final java.util.Map<Class<?>, com.github.gtache.fxml.compiler.ControllerFactory<?>> controllersMap, final java.util.Map<Class<?>, java.util.ResourceBundle> resourceBundlesMap) {
        this.controllersMap = java.util.Map.copyOf(controllersMap);
        this.resourceBundlesMap = java.util.Map.copyOf(resourceBundlesMap);
    }

    /**
     * Loads the view. Can only be called once.
     *
     * @return The view parent
     */
    public <T> T load() {
    if (loaded) {
        throw new IllegalStateException("Already loaded");
    }
    final var bundle = resourceBundlesMap.get(com.github.gtache.fxml.compiler.parsing.xml.IncludesController.class);
    final var fieldMap = new HashMap<String, Object>();
    final var borderpane0 = new javafx.scene.layout.BorderPane();
    final var vbox0 = new javafx.scene.layout.VBox();
    javafx.scene.layout.BorderPane.setAlignment(vbox0, javafx.geometry.Pos.CENTER);
    final var hbox0 = new javafx.scene.layout.HBox();
    hbox0.setAlignment(javafx.geometry.Pos.CENTER);
    hbox0.setSpacing(10.0);
    final var slider0 = new javafx.scene.control.Slider();
    fieldMap.put("playSlider", slider0);
    javafx.scene.layout.HBox.setHgrow(slider0, javafx.scene.layout.Priority.ALWAYS);
    final var insets0 = new javafx.geometry.Insets(0, 0, 0, 10.0);
    slider0.setPadding(insets0);
    final var label0 = new javafx.scene.control.Label();
    fieldMap.put("playLabel", label0);
    label0.setText("Label");
    final var insets1 = new javafx.geometry.Insets(0, 10.0, 0, 0);
    label0.setPadding(insets1);
    hbox0.getChildren().addAll(java.util.List.of(slider0, label0));
    final var insets2 = new javafx.geometry.Insets(10.0, 0, 0, 0);
    hbox0.setPadding(insets2);
    final var hbox1 = new javafx.scene.layout.HBox();
    hbox1.setAlignment(javafx.geometry.Pos.CENTER);
    hbox1.setSpacing(10.0);
    final var button0 = new javafx.scene.control.Button();
    fieldMap.put("playButton", button0);
    button0.setMnemonicParsing(false);
    final var insets3 = new javafx.geometry.Insets(0, 20.0, 0, 0);
    javafx.scene.layout.HBox.setMargin(button0, insets3);
    final var label1 = new javafx.scene.control.Label();
    label1.setText(bundle.getString("media.volume.label"));
    final var slider1 = new javafx.scene.control.Slider();
    fieldMap.put("volumeSlider", slider1);
    slider1.setValue(100);
    final var label2 = new javafx.scene.control.Label();
    fieldMap.put("volumeValueLabel", label2);
    label2.setText("Label");
    final var map0 = new HashMap<>(resourceBundlesMap);
    final var bundle0 = java.util.ResourceBundle.getBundle("com.github.gtache.fxml.compiler.parsing.xml.ControlsBundle");
    map0.put(com.github.gtache.fxml.compiler.parsing.xml.ControlsController, bundle0);
    final var view0 = new com.github.gtache.fxml.compiler.parsing.xml.ControlsView(controllersMap, map0);
    final javafx.scene.Parent parsedinclude0 = view0.load();
    final var controller0 = view0.controller();
    fieldMap.put("controlsController", controller0);
    hbox1.getChildren().addAll(java.util.List.of(button0, label1, slider1, label2, parsedinclude0));
    final var insets4 = new javafx.geometry.Insets(10.0, 10.0, 10.0, 10.0);
    hbox1.setPadding(insets4);
    vbox0.getChildren().addAll(java.util.List.of(hbox0, hbox1));
    borderpane0.setBottom(vbox0);
    final var vbox1 = new javafx.scene.layout.VBox();
    fieldMap.put("vbox", vbox1);
    final var toolbar0 = new javafx.scene.control.ToolBar();
    fieldMap.put("toolBar", toolbar0);
    final var titledpane0 = new javafx.scene.control.TitledPane();
    fieldMap.put("titledPane", titledpane0);
    final var tilepane0 = new javafx.scene.layout.TilePane();
    fieldMap.put("tilePane", tilepane0);
    final var textflow0 = new javafx.scene.text.TextFlow();
    fieldMap.put("textFlow", textflow0);
    final var tabpane0 = new javafx.scene.control.TabPane();
    fieldMap.put("tabPane", tabpane0);
    final var tab0 = new javafx.scene.control.Tab();
    fieldMap.put("tab", tab0);
    final var stackpane0 = new javafx.scene.layout.StackPane();
    fieldMap.put("stackPane", stackpane0);
    final var splitpane0 = new javafx.scene.control.SplitPane();
    fieldMap.put("splitPane", splitpane0);
    final var scrollpane0 = new javafx.scene.control.ScrollPane();
    fieldMap.put("scrollPane", scrollpane0);
    final var pane0 = new javafx.scene.layout.Pane();
    fieldMap.put("pane", pane0);
    final var hbox2 = new javafx.scene.layout.HBox();
    fieldMap.put("hbox", hbox2);
    final var group0 = new javafx.scene.Group();
    fieldMap.put("group", group0);
    final var gridpane0 = new javafx.scene.layout.GridPane();
    fieldMap.put("gridPane", gridpane0);
    final var flowpane0 = new javafx.scene.layout.FlowPane();
    fieldMap.put("flowPane", flowpane0);
    final var dialogpane0 = new javafx.scene.control.DialogPane();
    fieldMap.put("dialogPane", dialogpane0);
    final var buttonbar0 = new javafx.scene.control.ButtonBar();
    fieldMap.put("buttonBar", buttonbar0);
    final var anchorpane0 = new javafx.scene.layout.AnchorPane();
    fieldMap.put("anchorPane", anchorpane0);
    final var label3 = new javafx.scene.control.Label();
    label3.setManaged(false);
    anchorpane0.getChildren().addAll(java.util.List.of(label3));
    buttonbar0.getButtons().addAll(java.util.List.of(anchorpane0));
    dialogpane0.setContent(buttonbar0);
    flowpane0.getChildren().addAll(java.util.List.of(dialogpane0));
    gridpane0.getChildren().addAll(java.util.List.of(flowpane0));
    final var columnconstraints0 = new javafx.scene.layout.ColumnConstraints();
    fieldMap.put("columnConstraints", columnconstraints0);
    columnconstraints0.setHgrow(javafx.scene.layout.Priority.SOMETIMES);
    columnconstraints0.setMinWidth(10.0);
    gridpane0.getColumnConstraints().addAll(java.util.List.of(columnconstraints0));
    final var rowconstraints0 = new javafx.scene.layout.RowConstraints();
    rowconstraints0.setMinHeight(10.0);
    rowconstraints0.setVgrow(javafx.scene.layout.Priority.SOMETIMES);
    gridpane0.getRowConstraints().addAll(java.util.List.of(rowconstraints0));
    group0.getChildren().addAll(java.util.List.of(gridpane0));
    hbox2.getChildren().addAll(java.util.List.of(group0));
    pane0.getChildren().addAll(java.util.List.of(hbox2));
    scrollpane0.setContent(pane0);
    splitpane0.getItems().addAll(java.util.List.of(scrollpane0));
    stackpane0.getChildren().addAll(java.util.List.of(splitpane0));
    tab0.setContent(stackpane0);
    tabpane0.getTabs().addAll(java.util.List.of(tab0));
    textflow0.getChildren().addAll(java.util.List.of(tabpane0));
    tilepane0.getChildren().addAll(java.util.List.of(textflow0));
    titledpane0.setContent(tilepane0);
    toolbar0.getItems().addAll(java.util.List.of(titledpane0));
    vbox1.getChildren().addAll(java.util.List.of(toolbar0));
    borderpane0.setCenter(vbox1);
    final var controllerFactory = controllersMap.get(com.github.gtache.fxml.compiler.parsing.xml.IncludesController.class);
    controller = (com.github.gtache.fxml.compiler.parsing.xml.IncludesController) controllerFactory.create(fieldMap);
    button0.setOnAction(e -> callEventHandlerMethod("playPressed", e));
    try {
        final var initialize = controller.getClass().getDeclaredMethod("initialize");
        initialize.setAccessible(true);
        initialize.invoke(controller);
    } catch (final java.lang.reflect.InvocationTargetException | IllegalAccessException e) {
        throw new RuntimeException("Error using reflection", e);
    } catch (final NoSuchMethodException ignored) {
    }
    loaded = true;
    return (T) borderpane0;
}

    private <T extends javafx.event.Event> void callEventHandlerMethod(final String methodName, final T event) {
    try {
        final java.lang.reflect.Method method;
        final var methods = java.util.Arrays.stream(controller.getClass().getDeclaredMethods())
                .filter(m -> m.getName().equals(methodName)).toList();
        if (methods.size() > 1) {
            final var eventMethods = methods.stream().filter(m ->
                    m.getParameterCount() == 1 && javafx.event.Event.class.isAssignableFrom(m.getParameterTypes()[0])).toList();
            if (eventMethods.size() == 1) {
                method = eventMethods.getFirst();
            } else {
                final var emptyMethods = methods.stream().filter(m -> m.getParameterCount() == 0).toList();
                if (emptyMethods.size() == 1) {
                    method = emptyMethods.getFirst();
                } else {
                    throw new IllegalArgumentException("Multiple matching methods for " + methodName);
                }
            }
        } else if (methods.size() == 1) {
            method = methods.getFirst();
        } else {
            throw new IllegalArgumentException("No matching method for " + methodName);
        }
        method.setAccessible(true);
        if (method.getParameterCount() == 0) {
            method.invoke(controller);
        } else {
            method.invoke(controller, event);
        }
    } catch (final IllegalAccessException | java.lang.reflect.InvocationTargetException ex) {
        throw new RuntimeException("Error using reflection on " + methodName, ex);
    }
}

private <T, U> U callCallbackMethod(final String methodName, final T value, final Class<T> clazz) {
    try {
        final java.lang.reflect.Method method;
        final var methods = java.util.Arrays.stream(controller.getClass().getDeclaredMethods())
                .filter(m -> m.getName().equals(methodName)).toList();
        if (methods.size() > 1) {
            final var eventMethods = methods.stream().filter(m ->
                    m.getParameterCount() == 1 && clazz.isAssignableFrom(m.getParameterTypes()[0])).toList();
            if (eventMethods.size() == 1) {
                method = eventMethods.getFirst();
            } else {
                throw new IllegalArgumentException("Multiple matching methods for " + methodName);
            }
        } else if (methods.size() == 1) {
            method = methods.getFirst();
        } else {
            throw new IllegalArgumentException("No matching method for " + methodName);
        }
        method.setAccessible(true);
        return (U) method.invoke(controller, value);
    } catch (final IllegalAccessException | java.lang.reflect.InvocationTargetException ex) {
        throw new RuntimeException("Error using reflection on " + methodName, ex);
    }
}


    /**
     * @return The controller
     */
    public com.github.gtache.fxml.compiler.parsing.xml.IncludesController controller() {
        if (loaded) {
            return controller;
        } else {
            throw new IllegalStateException("Not loaded");
        }
    }
}
